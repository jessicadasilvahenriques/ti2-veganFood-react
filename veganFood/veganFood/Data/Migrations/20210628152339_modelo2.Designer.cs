// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using veganFood.Data;

namespace veganFood.Data.Migrations
{
    [DbContext(typeof(VeganDbContext))]
    [Migration("20210628152339_modelo2")]
    partial class modelo2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CategoriasReceitas", b =>
                {
                    b.Property<int>("CategoriasIdCategoria")
                        .HasColumnType("int");

                    b.Property<int>("ReceitasIDreceita")
                        .HasColumnType("int");

                    b.HasKey("CategoriasIdCategoria", "ReceitasIDreceita");

                    b.HasIndex("ReceitasIDreceita");

                    b.ToTable("CategoriasReceitas");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("veganFood.Models.Categorias", b =>
                {
                    b.Property<int>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Designacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fotografia")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCategoria");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("veganFood.Models.Fotografias", b =>
                {
                    b.Property<int>("IDfotografia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Fotografia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceitaFK")
                        .HasColumnType("int");

                    b.HasKey("IDfotografia");

                    b.HasIndex("ReceitaFK");

                    b.ToTable("Fotografias");

                    b.HasData(
                        new
                        {
                            IDfotografia = 1,
                            Fotografia = "almondegas.jpg",
                            ReceitaFK = 1
                        },
                        new
                        {
                            IDfotografia = 2,
                            Fotografia = "arroz.jpg",
                            ReceitaFK = 2
                        },
                        new
                        {
                            IDfotografia = 3,
                            Fotografia = "mousse.jpg",
                            ReceitaFK = 3
                        },
                        new
                        {
                            IDfotografia = 4,
                            Fotografia = "alho.jpg",
                            ReceitaFK = 4
                        });
                });

            modelBuilder.Entity("veganFood.Models.Receitas", b =>
                {
                    b.Property<int>("IDreceita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AutorFK")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingredientes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModoPreparo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDreceita");

                    b.HasIndex("AutorFK");

                    b.ToTable("Receitas");

                    b.HasData(
                        new
                        {
                            IDreceita = 1,
                            AutorFK = 0,
                            Descricao = "Arroz do mar",
                            Ingredientes = "Azeite qb, 1 cebola média, 2 dentes de alho, Tomate sem pele picado, 1 / 2 pimento vermelho aos cubos, 1 / 2 chouriço vegan 1 embalagem de flor de bananeira em matinada de algas , 1 copo de arroz, 1 caldo de legumes vegan, sal e açafrão qb",
                            ModoPreparo = "Põe-se numa paelheira azeite cebola picadinha e dois dentes de alho.Quando estiver alourado deita-se um tomate sem pele picado e meio pimento vermelho e meio pimento verde aos cubos. Tempera - se com sal e açafrão. Adiciona meio chouriço vegan, cortado às rodelas e flor de bananeira.Deixa - se cozer um pouco. Acrescenta um copo de arroz e mexe - se. Juntam - se dois copos de água com caldo de legumes. Mexe - se e deixa - se cozer o arroz 12 a 15 minutos. Está pronto a ser servido"
                        },
                        new
                        {
                            IDreceita = 2,
                            AutorFK = 0,
                            Descricao = "Almôndegas vegan",
                            Ingredientes = "1 embalagem de proteína texturizada de ervilha ( Let’s Meat ), 1 pão(tipo molete), salsa qb, 1 dente de alho, 50 g de cebola, sal qb, 1 colher de sobremesa de molho de soja, 1 pitada de pimenta em pó, 1 ovo vegan(usei my ey), azeite para pincelar, farinha de glúten(se necessário)",
                            ModoPreparo = "Começa por hidratar a proteína de ervilha, coloquei em água quente durante 15 minutos. Com um processador de alimentos começa por picar a salsa, o alho e o pão. Numa tigela à parte mistura os restantes ingredientes, adiciona a mistura de salsa e a proteína texturizada bem espremida. Se necessário, podes acrescentar farinha para modelar as bolinhas.Eu utilizei farinha de glúten. Coloca no frigorifico durante 1 hora. Retira e com a ajuda de duas colheres faz bolinhas. Podes pincelar e colocar no forno ou fritar em azeite. Serve com molho de tomate e esparguete ou uma salada."
                        },
                        new
                        {
                            IDreceita = 3,
                            AutorFK = 0,
                            Descricao = "Mousse de leite vegan",
                            Ingredientes = "1 embalagem de proteína texturizada de ervilha ( Let’s Meat ), 1 pão(tipo molete), salsa qb, 1 dente de alho, 50 g de cebola, sal qb, 1 colher de sobremesa de molho de soja, 1 pitada de pimenta em pó, 1 ovo vegan(usei my ey), azeite para pincelar, farinha de glúten(se necessário)",
                            ModoPreparo = "Começa por hidratar a proteína de ervilha, coloquei em água quente durante 15 minutos. Com um processador de alimentos começa por picar a salsa, o alho e o pão. Numa tigela à parte mistura os restantes ingredientes, adiciona a mistura de salsa e a proteína texturizada bem espremida. Se necessário, podes acrescentar farinha para modelar as bolinhas.Eu utilizei farinha de glúten. Coloca no frigorifico durante 1 hora. Retira e com a ajuda de duas colheres faz bolinhas. Podes pincelar e colocar no forno ou fritar em azeite. Serve com molho de tomate e esparguete ou uma salada."
                        },
                        new
                        {
                            IDreceita = 4,
                            AutorFK = 0,
                            Descricao = "Alho francês à Brás",
                            Ingredientes = "1 embalagem de proteína texturizada de ervilha ( Let’s Meat ), 1 pão(tipo molete), salsa qb, 1 dente de alho, 50 g de cebola, sal qb, 1 colher de sobremesa de molho de soja, 1 pitada de pimenta em pó, 1 ovo vegan(usei my ey), azeite para pincelar, farinha de glúten(se necessário)",
                            ModoPreparo = "Começa por hidratar a proteína de ervilha, coloquei em água quente durante 15 minutos. Com um processador de alimentos começa por picar a salsa, o alho e o pão. Numa tigela à parte mistura os restantes ingredientes, adiciona a mistura de salsa e a proteína texturizada bem espremida. Se necessário, podes acrescentar farinha para modelar as bolinhas.Eu utilizei farinha de glúten. Coloca no frigorifico durante 1 hora. Retira e com a ajuda de duas colheres faz bolinhas. Podes pincelar e colocar no forno ou fritar em azeite. Serve com molho de tomate e esparguete ou uma salada."
                        });
                });

            modelBuilder.Entity("veganFood.Models.Utilizadores", b =>
                {
                    b.Property<int>("IDutilizador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDutilizador");

                    b.ToTable("Utilizadores");

                    b.HasData(
                        new
                        {
                            IDutilizador = 1,
                            Email = "jose@hotmail.com",
                            Nome = "Jose",
                            UserNameId = "8b045d16-ea55-410e-afce-695013e76972"
                        });
                });

            modelBuilder.Entity("CategoriasReceitas", b =>
                {
                    b.HasOne("veganFood.Models.Categorias", null)
                        .WithMany()
                        .HasForeignKey("CategoriasIdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("veganFood.Models.Receitas", null)
                        .WithMany()
                        .HasForeignKey("ReceitasIDreceita")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("veganFood.Models.Fotografias", b =>
                {
                    b.HasOne("veganFood.Models.Receitas", "Receita")
                        .WithMany("Fotografias")
                        .HasForeignKey("ReceitaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receita");
                });

            modelBuilder.Entity("veganFood.Models.Receitas", b =>
                {
                    b.HasOne("veganFood.Models.Utilizadores", "Autor")
                        .WithMany("Receitas")
                        .HasForeignKey("AutorFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("veganFood.Models.Receitas", b =>
                {
                    b.Navigation("Fotografias");
                });

            modelBuilder.Entity("veganFood.Models.Utilizadores", b =>
                {
                    b.Navigation("Receitas");
                });
#pragma warning restore 612, 618
        }
    }
}
